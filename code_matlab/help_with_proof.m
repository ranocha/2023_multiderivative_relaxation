clear all;
testproof;

B21 = double(subs(B21, dt = 1 / sqrt(2)));
B22 = double(subs(B22, dt = 1 / sqrt(2)));
B23 = double(subs(B23, dt = 1 / sqrt(2)));
B31 = double(subs(B31, dt = 1 / sqrt(2)));
B32 = double(subs(B32, dt = 1 / sqrt(2)));
B33 = double(subs(B33, dt = 1 / sqrt(2)));
S   = double(subs(S,   dt = 1 / sqrt(2)));

% terms = {B32*S*B23*B23'*S'*B32', ...
%          %B32*S*B23, ...
%          B32*S*B23*B33', ...
%          B23'*S'*B32', ...
%          B33*B23'*S'*B32', ...
%          %S'*B32', ...
%          %B21'*S'*B32', ...
%          B33'*S'*B32', ...
%          B33'*B21'*S'*B32', ...
%          %B32*S, ...
%          B32*S*B21, ...
%          %B32*S*B33, ...
%          B32*S*B21*B33, ...
%          %B32*S*S'*B32', ...
%          B32*S*B21*S'*B32', ...
%          %B32*S*B21'*S'*B32', ...
%          B32*S*B21*B21'*S'*B32',...
%          0*B32,...
%          0*B32,...
%          0*B32,...
%          0*B32
%          };

% terms = {B32*S*B23*B23'*S'*B32', ...
%          B32*S*B23*B33', ...
%          B23'*S'*B32', ...
%          B33*B23'*S'*B32', ...
%          B33'*S'*B32', ...
%          B33'*B21'*S'*B32', ...
%          B32*S*B21, ...
%          B32*S*B21*B33, ...
%          B32*S*B21*S'*B32', ...
%          B32*S*B21*B21'*S'*B32',...
%          0*B32,...
%          0*B32,...
%          0*B32,...
%          0*B32
%          };

terms = {B32*S*B23*B23'*S'*B32', ...
         B32*S*B23*B33', ...
         B33*B23'*S'*B32', ...
         B33'*B21'*S'*B32', ...
         B32*S*B21*B33, ...
         B32*S*B21*B21'*S'*B32',...
         0*B32,...
         0*B32,...
         0*B32,...
         0*B32
         };

%signs = [1 -1 1 -1 1];
%signs = [signs, -[1 1 -1 -1 +1 +1 -1 -1, 1 1 1 1 0 0 0 0]];

signs = [1 1 1 1 1 -1]


N = length(signs);

res = 0;
for ii = 1 : N
    res = res + signs(ii) * terms{ii};
end
res
if (norm(res) > 1e-12)
    error('something is wrong')
end



for ii = 1 : N
  for kk = ii + 1 : N
      for jj = kk + 1 : N
          for ll = jj + 1 : N
              for mm = ll + 1 : N
                  for qq = mm + 1 : N
           res = signs(ii) * terms{ii} + signs(kk) * terms{kk} + signs(jj) * terms{jj} + signs(ll) * terms{ll};
           res = res + signs(mm) * terms{mm} + signs(qq) * terms{qq};
           if (norm(res) < 1e-12)
            [ii, kk, jj, ll, mm, qq]
            pause
           end
                  end
              end
          end
      end
  end
end


